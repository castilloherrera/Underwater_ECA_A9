<launch>
  <arg name="underwater_name"/>
  <arg name="debug" default="0"/>
  <arg name="mode" default="default"/>

  <arg name="x" default="0"/>
  <arg name="y" default="0"/>
  <arg name="z" default="0"/>
  <arg name="roll" default="0.0"/>
  <arg name="pitch" default="0.0"/>
  <arg name="yaw" default="0.0"/>

  <node name="urdf_spawner_$(arg underwater_name)" pkg="description" type="spawn_model" respawn="false" output="screen"
        args="-urdf -x $(arg x) -y $(arg y) -z $(arg z) -R $(arg roll) -P $(arg pitch) -Y $(arg yaw) -model $(arg underwater_name) -param /$(arg underwater_name)/robot_description"/>

  <group ns="$(arg underwater_name)">
    <param name="robot_description"
           command="$(find xacro)/xacro '$(find description_und)/robots/eca_a9_$(arg mode).urdf.xacro' 
                    debug:=$(arg debug)
                    namespace:=$(arg underwater_name)
                    inertial_reference_frame:=world" />

    <node name="robot_state_publisher" pkg="robot_state_publisher" type="robot_state_publisher" respawn="true" output="screen">
      <!--param name="robot_description" value="/$(arg underwater_name)/robot_description" /-->
    </node>

    <!-- tf_prefix -->
    <param name="namespace" value="$(arg underwater_name)" />  

    <!-- publish state and tf for in relation to the world frame -->
    <include file="$(find tools)/launch/message_to_tf.launch">
      <arg name="namespace" value="$(arg underwater_name)"/>
      <arg name="world_frame" value="world"/>
      <arg name="child_frame_id" value="/$(arg underwater_name)/base_link"/>
    </include>

    <!-- Control -->
    <include file="$(find control)/launch/start_trajectory_circle_fleet.launch">
      <arg name="name"  value="/$(arg underwater_name)" />
    </include>
  </group>
</launch>
